@model TimePilot.Web.ViewModels.ResourceCapacityViewModel
@using TimePilot.Web.Models;
@using System.Linq;

@{
    ViewBag.Title = "Resource Capacity";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    table {
       
        border-collapse: collapse; 
        width: 100%
    }

    th {
        background: #5cd2db;
        border: 1px solid #000;    
        text-align: center;
        padding: 6px;
    }

        td{
            text-align: center; 
            vertical-align: middle;
        }

        select{
            cursor: pointer;
            border-radius: 3px;
            border-color: black;
            margin: 3px;
            padding: 1px;
        }

        tr:nth-child(even){
            background: #cbebed;

        }

        input[type="text"].total {
            background: #2dbae5 ;
            width: 80%;
            font-weight: 700;  
        }

        .popover-title{
             font-size:17px;
             font-family: 'Century Gothic';
             font-weight:700;
             background: #e0e0e0;
        }

        .popover-content{
            font-size:12px;
            font-family: 'Century Gothic';
            text-align:center;
        }

</style>

<div class="flex-container-header">
    <h1>Time Pilot</h1>
    <p><a class="pre-activebread" href="Index">Project Selection</a> >
       <a class="pre-activebread" href="Story">Story Points</a> >
       <a class="activebread">Resource Capacity</a> >
       <a class="deactivebread">Conversion Rate & Results</a>
    </p>
</div>

<div class="resource-container">
        @using (Html.BeginForm("Resource", "Home", FormMethod.Post, new { @id = "resourceForm" }))
            {
            Model.pageState = new List<int>();
            <table id="myTable">
                <tr>
                    <th>Role</th>
                    <th>Name</th>
                    <th>Sprint Days</th>
                    <th>% Work</th>
                    <th>Total (hrs)</th>
                    <th>Standup Duration (hrs)</th>
                    <th>Total Standup (hrs)</th>
                    <th>Misc. (hrs) <a href="#" data-toggle="popover" data-placement="bottom" title="Miscellaneous" data-content="Meetings (Backlog Review, Dev Meeting), Demos/Retros, Sprint Planning"><span class="glyphicon glyphicon-question-sign"></span></a></th>
                    <th>Time Off (hrs)<a href="#" data-toggle="popover" data-placement="bottom" title="Time Off" data-content="Any sick days, holidays, vacation time, or other time off here "><span class="glyphicon glyphicon-question-sign"></span></a></th>
                    <th>Non Dev (hrs)</th>
                    <th>Total Available (hrs)</th>
                    <th>Delete</th>
                </tr>
                @for (int i = 0; i < Model.sprints.Count(); i++)
                {
                    Model.pageState.Add(0);
                    Model.sprints[i].PageID = i;
                    <tr id="@i" class="sprint-row">
                        @Html.HiddenFor(m => m.sprints[i].SprintID)
                        <th class="sprints sprint-title">
                            @Html.TextBoxFor(m => m.sprints[i].Name, new { @placeholder = "Sprint name" })
                        </th>

                        <td class="sprint-button">
                            <input type="button" value="Add Member" id=@(i) class="sprintbutton add-member" />
                            <input type="hidden" id="sprints_@(i)__PageID" name="sprints[@(i)].PageID" value="@i" />
                        </td>
                    </tr>

                    int memberCount = 0;
                    for (int j = 0; j < Model.members.Count; j++)
                    {
                        if (Model.members[j].SprintID == Model.sprints[i].SprintID)
                        {
                            Model.pageState[i]++;

                            <tr id="@i-@memberCount" class="member-row">
                                <input type="hidden" id="members_@(i)__PageID" name="members[@(i)].PageID" value="@i" />
                                <td>
                                    <select>
                                        <option value="leadDev">Lead Dev</option>
                                        <option value="seniorDev">Senior Dev</option>
                                        <option value="intermediateDev">Dev</option>
                                        <option value="juniorDev">Junior Dev</option>
                                        <option value="leadQA">Lead QA</option>
                                        <option value="seniorQA">Senior QA</option>
                                        <option value="intermediateQA">QA</option>
                                        <option value="juniorQA">Junior QA</option>
                                    </select>
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => m.members[j].Name, new { @class = "sprint-name", placeholder = "Name" })
                                    <!--Html.HiddenFor(m => m.members[j].Name)-->
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => m.members[j].SprintDays, new { @class = "raw-data" })
                                    @Html.HiddenFor(m => m.members[j].SprintDays)
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => m.members[j].PercentWork, new { @class = "raw-data" })
                                    @Html.HiddenFor(m => m.members[j].PercentWork)
                                </td>

                                <td>
                                    <input type="text" class="total" Name="totalHours" readonly />
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => m.members[j].StandupDuration, new { @class = "raw-data" })
                                    @Html.HiddenFor(m => m.members[j].StandupDuration)
                                </td>
                                <td>
                                    <input type="text" class="total" Name="standUps" readonly />
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => m.members[j].Misc, new { @class = "raw-data" })
                                    @Html.HiddenFor(m => m.members[j].Misc)
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => m.members[j].TimeOff, new { @class = "raw-data" })
                                    @Html.HiddenFor(m => m.members[j].TimeOff)
                                </td>
                                <td>
                                    <input type="text" class="total" Name="nonDevHours" readonly />
                                </td>
                                <td>
                                    <input type="text" class="total" Name="totalAvailable" readonly />
                                </td>
                                <td>
                                    <!-- Does nothing right now -->
                                    <input type="checkbox" />
                                </td>
                            </tr>
                            memberCount++;
                        }
                    }
                    <tr id="@i-@memberCount"></tr>
                    if (i == (Model.sprints.Count() - 1))
                    {
                        <tr id="@(i+1)"/>
                    }
                }
            </table>
            <input type="button" value="+" class="button add-sprint" data-toggle="tooltip" title="Add a sprint" data-placement="right"/>
            <div class="total-capacity">
                <p><b>Total Dev Capacity:</b>  <span class="final-value"/>0</p>
                <p><b>Average Per Sprint: </b> <span class="final-value"/>0</p>
                <p><b>Average Per Week: </b> <span class="final-value"/>0</p>
            </div>

            <div class="buttons-container">
                <input type="button" value="Previous" class="button"onclick="location.href='@Url.Action("Story", "Home")'"  />
                <input type="button" value="Delete Selected" class="button" />
                <input type="button" value="Results Page" class="button" onclick="return ResourceValidation();" data-toggle="modal" data-target="#MyModal" />
                <input type="button" value="TEST BUTTON" class="btn-primary" onclick="postResourceForm()" />
            </div>

            <div class="modal fade" id="MyModal" data-keyboard="false" data-backdrop="static">
                <!-- Warning Pop UP HTML-->
                <div class="modalstuff">
                    <header>
                        <h2 class="storypopup">
                            One or more members has negative total avalibality
                        </h2>
                    </header>
                    <button class="btn closebutton" id="closebutton" data-dismiss="modal"> Edit Members </button>
                    <button class="btn proceedbutton" id="continuebutton" data-dismiss="modal" type="submit"> Continue </button>
                </div>
            </div>
        }
</div>




<script type="text/javascript">
    function setButtonIndex(e) {
        document.getElementById('buttonIndex').value = e;
    }
    function setMemberIndex(e) {
        document.getElementById('memberIndex').value = e;
    }

    $('.collapse').collapse("collapse");

    function postResourceForm() {
        var data = $('#resourceForm').serialize();
        $.ajax({
            type: "POST",
            url: "@Url.Action("ResourceUpdate")",
            data: data,
            traditional:true,
            success: function (result) {
                //do nothing right now, used to be reload
            }
        })
    }

    function ResourceValidation() {
        var isInvalidInput = false;
        $("input[name='totalAvailable']").each(function () {
            if (parseInt($(this).attr('value')) <= 0) {
                $(this).css("background-color", "#e56060");
                isInvalidInput = true;
            }
        })

        if(isInvalidInput) {
            var modal = document.getElementById('MyModal');
            var closebutton = document.getElementById('closebutton')
            var continuebutton = document.getElementById('continuebutton')
            modal.style.display = "block";
            closebutton.onclick = function() {
                modal.style.display = "none";//closes pop up
            }
            continuebutton.onclick = function()
            {
                postResourceForm();
                location.href = "@Url.Action("Result", "Home")";
            }
        }
        else {
            postResourceForm();
            location.href = "@Url.Action("Result", "Home")";
        }
    }

    function calculateValues(data, totals, finals) {
        // Member variables
        var hrsPerDay = 8;
        var temp = 0;

        // Data
        var sprintDays = data[0].value;
        var pcntWork = data[1].value;
        var standupDuration = data[2].value;
        var miscHours = data[3].value;
        var timeOff = data[4].value;

        // Totals
        var ttlHours = totals[0];
        var standUps = totals[1];
        var nonDevHours = totals[2];
        var ttlAvailable = totals[3];

        // Finals
        var ttlDevCapac = finals[0];
        var avgPerSprint = finals[1];
        var avgPerWeek = finals[2];

        // Data Calculations
        ttlHours.value = sprintDays * (pcntWork / 100) * hrsPerDay;
        standUps.value = sprintDays * standupDuration;
        nonDevHours.value = parseFloat(miscHours) + parseFloat(standUps.value);
        ttlAvailable.value = ttlHours.value - nonDevHours.value - timeOff;

        // Overall Calculations
        var ttls = document.getElementsByName("totalAvailable");
        var sprints = document.getElementsByClassName("sprint-title").length;
        for (i = 0; i < ttls.length; i++) {temp += parseFloat(ttls[i].value);}
        ttlDevCapac.textContent = parseFloat(temp);
        avgPerSprint.textContent = parseFloat(temp / sprints);
        avgPerWeek.textContent = parseFloat((temp / sprints) / 2);
    }

    // Popovers
    $(document).ready(function () {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    $(document).on('click', function (e) {
        $('[data-toggle="popover"],[data-original-title]').each(function () {
            if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0 ) {
                (($(this).popover('hide').data('bs.popover') || {}).inState || {}).click = false
            }
        });
    });

    // Tooltip
    $(document).ready(function(){
        $('[data-toggle="tooltip"]').tooltip();
    });

    // Set default values + calculations on select box change
    $(document).on("change", "select", function () {
        var elems = this.parentNode.parentNode.getElementsByClassName("raw-data");
        switch (this.value) {
            case 'leadDev':
                elems[0].value = 10;   // Sprint Days
                elems[1].value = 50;   // % Work
                elems[2].value = 0.25; // Standup Duration
                //elems[3].value = 2.5;  // Standups
                elems[3].value = 6;    // Misc.
                elems[4].value = 0;    // Time Off
                break;
            case 'seniorDev':
                elems[0].value = 10;   // Sprint Days
                elems[1].value = 70;   // % Work
                elems[2].value = 0.25; // Standup Duration
                //elems[3].value = 2.5;  // Standups
                elems[3].value = 5;    // Misc.
                elems[4].value = 0;    // Time Off
                break;
            case 'intermediateDev':
                elems[0].value = 10;   // Sprint Days
                elems[1].value = 80;   // % Work
                elems[2].value = 0.25; // Standup Duration
                //elems[3].value = 2.5;  // Standups
                elems[3].value = 4;    // Misc.
                elems[4].value = 0;    // Time Off
                break;
            case 'juniorDev':
                elems[0].value = 10;   // Sprint Days
                elems[1].value = 90;   // % Work
                elems[2].value = 0.25; // Standup Duration
                //elems[3].value = 2.5;  // Standups
                elems[3].value = 4;    // Misc.
                elems[4].value = 0;    // Time Off
                break;
            case 'leadQA':
                elems[0].value = 10;   // Sprint Days
                elems[1].value = 50;   // % Work
                elems[2].value = 0.25; // Standup Duration
                //elems[3].value = 2.5;  // Standups
                elems[3].value = 6;    // Misc.
                elems[4].value = 0;    // Time Off
                break;
            case 'seniorQA':
                elems[0].value = 10;   // Sprint Days
                elems[1].value = 70;   // % Work
                elems[2].value = 0.25; // Standup Duration
                //elems[3].value = 2.5;  // Standups
                elems[3].value = 5;    // Misc.
                elems[4].value = 0;    // Time Off
                break;
            case 'intermediateQA':
                elems[0].value = 10;   // Sprint Days
                elems[1].value = 80;   // % Work
                elems[2].value = 0.25; // Standup Duration
                //elems[3].value = 2.5;  // Standups
                elems[3].value = 4;    // Misc.
                elems[4].value = 0;    // Time Off
                break;
            case 'juniorQA':
                elems[0].value = 10;   // Sprint Days
                elems[1].value = 90;   // % Work
                elems[2].value = 0.25; // Standup Duration
                //elems[3].value = 2.5;  // Standups
                elems[3].value = 4;    // Misc.
                elems[4].value = 0;    // Time Off
                break;
        }
        var data = this.parentNode.parentNode.getElementsByClassName("raw-data");
        var totals = this.parentNode.parentNode.getElementsByClassName("total");
        var finals = document.getElementsByClassName("final-value")
        calculateValues(data, totals, finals);
    })

    // Do calculations during user input
    $("input[class='raw-data']").on("keyup", function () {
        var data = this.parentNode.parentNode.getElementsByClassName("raw-data");
        var totals = this.parentNode.parentNode.getElementsByClassName("total");
        var finals = document.getElementsByClassName("final-value")
        calculateValues(data, totals, finals);
    })

    // Do calculations on page load
    $(window).load(function(){
        $(".member-row").each(function(){
            var data = this.getElementsByClassName("raw-data");
            var totals = this.getElementsByClassName("total");
            var finals = document.getElementsByClassName("final-value")
            calculateValues(data, totals, finals);
        })
    })

    // DOM modication for adding Sprints/Members
    // TODO: Change HTML of add member to actual member row
    $(document).ready(function () {
        var pageState = @Html.Raw(Json.Encode(Model.pageState));

        $(document).on('click', '.add-member', function(){
            var sprintNum = this.id;
            var memberNum = pageState[sprintNum];
            addMember(sprintNum, memberNum);
        })

        $('.add-sprint').click(function(){
            pageState.push(0);
            var sprintNum = pageState.length - 1;
            // Populate placeholder with correct HTML
            $('#'+sprintNum).html('<th class="sprints sprint-title"><input type="text" id="sprints_'+sprintNum+'__Name" name="sprints['+sprintNum+'].Name" placeholder="Sprint name"/></th><td class="sprint-button"><input type="button" value="Add Member" id='+sprintNum+' class="sprintbutton add-member" /> <input type="hidden" id="sprints_'+sprintNum+'__PageID" name="sprints['+sprintNum+'].PageID" value="'+sprintNum+'" /></td>');

            // Append member placeholder and add default member
            $('<tr id="'+sprintNum+'-'+pageState[sprintNum]+'"></tr>').insertAfter('#'+sprintNum);
            addMember(sprintNum, pageState[sprintNum]);

            // Append Sprint placeholder
            $('<tr id="'+(sprintNum+1)+'"/>').insertAfter('#'+sprintNum+'-'+pageState[sprintNum]);
        });

        function addMember(sprintNum, memberNum){
            $('#'+sprintNum+'-'+memberNum).html('id="'+sprintNum+'-'+memberNum+'" class="member-row"> <td> <select> <option value="leadDev">Lead Dev</option> <option value="seniorDev">Senior Dev</option> <option value="intermediateDev">Dev</option> <option value="juniorDev">Junior Dev</option> <option value="leadQA">Lead QA</option> <option value="seniorQA">Senior QA</option> <option value="intermediateQA">QA</option> <option value="juniorQA">Junior QA</option> </select> </td> <td> <input type="text" class="sprint-name" id="members_'+sprintNum+'__Name" name="members['+sprintNum+'].Name" placeholder="Name"/> </td> <td> <input type="text" class="raw-data" /> </td> <td> <input type="text" class="raw-data" /> </td> <td> <input type="text" class="total" Name="totalHours" readonly /> </td> <td> <input type="text" class="raw-data" /> </td> <td> <input type="text" class="total" Name="standUps" readonly /> </td> <td> <input type="text" class="raw-data" /> </td> <td> <input type="text" class="raw-data" /> </td> <td> <input type="text" class="total" Name="nonDevHours" readonly /> </td> <td> <input type="text" class="total" Name="totalAvailable" readonly /> </td> <td> <!-- Does nothing right now --> <input type="checkbox" /> </td> <input type="hidden" id="members_'+sprintNum+'__PageID" name="members['+sprintNum+'].PageID" value="'+sprintNum+'" ');
            $('<tr id="'+sprintNum+'-'+(memberNum+1)+'">').insertAfter('#'+sprintNum+'-'+memberNum);
            pageState[sprintNum]++;
        }
    });
</script>
