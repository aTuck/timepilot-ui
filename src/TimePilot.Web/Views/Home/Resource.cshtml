@model TimePilot.Web.ViewModels.ResourceCapacityViewModel
@using TimePilot.Web.Models;
@using System.Linq;

@{
    ViewBag.Title = "Resource Capacity";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    table {
       
        border-collapse: collapse; 
        width: 100%
    }

    th {
        background: #5cd2db;
        border: 1px solid #000;    
        text-align: center;
        padding: 6px;
    }

        td{
            text-align: center; 
            vertical-align: middle;
        }

        select{
            cursor: pointer;
            border-radius: 3px;
            border-color: black;
            margin: 3px;
            padding: 1px;
        }

        tr:nth-child(even){
            background: #cbebed;

        }

        input[type="text"].total {
            background: #2dbae5 ;
            width: 80%;
            font-weight: 700;  
        }

        .popover-title{
             font-size:17px;
             font-family: 'Century Gothic';
             font-weight:700;
             background: #e0e0e0;
        }

        .popover-content{
            font-size:12px;
            font-family: 'Century Gothic';
            text-align:center;
        }

</style>

<div class="flex-container-header">
    <h1>Time Pilot</h1>
    <p><a class="pre-activebread" href="Index">Project Selection</a> >
       <a class="pre-activebread" href="Story">Story Points</a> >
       <a class="activebread">Resource Capacity</a> >
       <a class="deactivebread">Conversion Rate & Results</a>
    </p>
</div>

<div class="resource-container">
        @using (Html.BeginForm("Resource", "Home", FormMethod.Post, new { @id = "resourceForm" }))
        {
            <table id="myTable">
                <tr>
                    <th>Role</th>
                    <th>Name</th>
                    <th>Sprint Days</th>
                    <th>% Work</th>
                    <th>Total Hours</th>
                    <th>Standup Duration</th>
                    <th>Standups</th>
                    <th>Misc. <a href="#" data-toggle="popover" data-placement="bottom" title="Miscellaneous" data-content="Meetings (Backlog Review, Dev Meeting), Demos/Retros, Sprint Planning"><span class="glyphicon glyphicon-question-sign"></span></a></th>
                    <th>Time Off<a href="#" data-toggle="popover" data-placement="bottom" title="Time Off" data-content="Any sick days, holidays, vacation time, or other time off here "><span class="glyphicon glyphicon-question-sign"></span></a></th>
                    <th>Non Dev Hours</th>
                    <th>Total Available</th>
                    <th>Delete</th>
                </tr>
                @for (int i = 0; i < Model.sprints.Count(); i++)
                {
                <tr>
                    <th class="sprints">Sprint @(i + 1)</th>

                    <td class="sprint-button">
                        <input type="submit" name="command" value="Add Member" id=@(i) onclick="setButtonIndex(this.id)" class="sprintbutton" />
                        @Html.HiddenFor(m => m.buttonIndex, new { id = "buttonIndex" })
                    </td>

                    <td class="sprint-button">
                        <input type="submit" name="command" id=@(i) value="Delete Sprint"  onclick="setButtonIndex(this.id)" class="sprintbutton" />
                        @Html.HiddenFor(m => m.buttonIndex, new { id = "buttonIndex" })
                    </td>
                    <td class="sprint-button">
                        <input type="submit" name="command" id=@(i) value="Copy Sprint"  onclick="setButtonIndex(this.id)" class="sprintbutton" />
                        @Html.HiddenFor(m => m.buttonIndex, new { id = "buttonIndex" })
                    </td>

                </tr>

                    for (int j = 0; j < Model.sprints[i].members.Count(); j++)
                    {
                    <tr>
                        <td>
                            @Html.DropDownListFor(m => m.sprints[i].members[j].role, new SelectList(Model.roleList, "Value", "Text", Model.sprints[i].members[j].role), "Select Role", new { id = @i.ToString() + @j.ToString(), @onchange = "setMemberIndex(this.id); this.form.submit()" })
                            @Html.HiddenFor(m => m.memberIndex, new { id = "memberIndex" })
                            

                        </td>
                        <td >
                            @Html.TextBoxFor(m => m.sprints[i].members[j].name, new {placeholder ="Name"})
                            @Html.HiddenFor(m => m.sprints[i].members[j].name)

                        </td>
                        <td>
                            @Html.TextBoxFor(m => m.sprints[i].members[j].sprintDays)
                            @Html.HiddenFor(m => m.sprints[i].members[j].sprintDays)
                        </td>
                        <td>
                            @Html.TextBoxFor(m => m.sprints[i].members[j].percentWork)
                            @Html.HiddenFor(m => m.sprints[i].members[j].percentWork)
                        </td>

                        <td >
                            @Html.TextBoxFor(m => m.sprints[i].members[j].totalHours, new { @readonly = true , @class = "total"})
                            @Html.HiddenFor(m => m.sprints[i].members[j].totalHours)
                        </td>
                        <td>
                            @Html.TextBoxFor(m => m.sprints[i].members[j].standupDuration)
                            @Html.HiddenFor(m => m.sprints[i].members[j].standupDuration)
                        </td>
                        <td>
                            @Html.TextBoxFor(m => m.sprints[i].members[j].standUps)
                            @Html.HiddenFor(m => m.sprints[i].members[j].standUps)
                        </td>
                        <td>
                            @Html.TextBoxFor(m => m.sprints[i].members[j].misc)
                            @Html.HiddenFor(m => m.sprints[i].members[j].misc)
                        </td>
                        <td>
                            @Html.TextBoxFor(m => m.sprints[i].members[j].timeOff)
                            @Html.HiddenFor(m => m.sprints[i].members[j].timeOff)
                        </td>
                        <td>
                            @Html.TextBoxFor(m => m.sprints[i].members[j].nonDevHours, new { @readonly = true , @class = "total" })
                            @Html.HiddenFor(m => m.sprints[i].members[j].nonDevHours)
                        </td>
                        <td>
                            @Html.TextBoxFor(m => m.sprints[i].members[j].totalAvailable, new { @readonly = true , @class = "total", @Name = "totalAvailable" })
                            @Html.HiddenFor(m => m.sprints[i].members[j].totalAvailable)
                        </td>
                        <td>
                            @Html.CheckBoxFor(m => m.sprints[i].members[j].isSelectedToDelete)
                            @Html.HiddenFor(m => m.sprints[i].members[j].isSelectedToDelete)
                        </td>
                    </tr>
                        }
                    }
            </table>

            /*
            for (int i = 0; i < Model.sprints.Count(); i++)
            {
                <div class="panel-group">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" href="#collapse@(i)">Sprint @(i+1)</a>
                            </h4>
                            <input type="submit" name="command" value="Add Member" id=@(i) onclick="setButtonIndex(this.id)" class="btn btn-default" />
                            @Html.HiddenFor(m => m.buttonIndex, new { id = "buttonIndex" })
                            <input type="submit" name="command" id=@(i) value="Delete Sprint" onclick="setButtonIndex(this.id)"  class="btn btn-default" />
                            @Html.HiddenFor(m => m.buttonIndex, new { id = "buttonIndex" })
                        </div>
                        <div id="collapse@(i)" class="panel-collapse collapse">
                            @for (int j = 0; j < Model.sprints[i].members.Count(); j++)
                            {
                                <div>
                                    @Html.DropDownListFor(m => m.sprints[i].members[j].role, new SelectList(Model.roleList, "Value", "Text", Model.sprints[i].members[j].role), "Add New Member", new { id = @i.ToString() + @j.ToString(), @onchange = "setMemberIndex(this.id); this.form.submit()" })
                                    @Html.HiddenFor(m => m.memberIndex, new { id = "memberIndex" })
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }*/

            <div class="total-capacity">
                <p><b>Total Dev Capacity:</b>  @Model.totalDevCapacity</p>
                <p><b>Average Per Sprint: </b> @Model.avgPerSprint</p>
                <p><b>Average Per Week: </b> @Model.avgPerWeek</p>
            </div>

            <div class="buttons-container">
                <input type="submit" name="command" id="command" value="Add Sprint" class="button" />
                <input type="submit" name="command" value="Delete Selected" class="button" />
                <input type="button" value="Previous" onclick="location.href='@Url.Action("Story", "Home")'" class="button" />
                <input type="submit" name="command" id="command" value="Recalculate Values" class="button" />
                <input type="button" value="Results Page" onclick="return ResourceValidation();" data-toggle="modal" data-target="#MyModal"  class="button" />  
            </div>
            
        }
</div>

<div class="modal fade" id="MyModal" data-keyboard="false" data-backdrop="static">
    <!-- Warning Pop UP HTML-->
    <div class="modalstuff">
        <header>
            <h2 class="storypopup">
                One or more members has negative total avalibality
            </h2>     
        </header>
        <button class="btn closebutton" id="closebutton" data-dismiss="modal"> Edit Members </button>
        <button class="btn proceedbutton" id="continuebutton" data-dismiss="modal"> Continue </button>
    </div>
</div>


<script type="text/javascript">
        function setButtonIndex(e) {
            document.getElementById('buttonIndex').value = e;
        }
        function setMemberIndex(e) {
            document.getElementById('memberIndex').value = e;
       }
        $('.collapse').collapse("collapse");

        function ResourceValidation() {
            var isInvalidInput = false;
            $("input[name='totalAvailable']").each(function () {
                if (parseInt($(this).attr('value')) <= 0) {
                    $(this).css("background-color", "#e56060");
                    isInvalidInput = true;
                }
            })

            if(isInvalidInput)
            {
                var modal = document.getElementById('MyModal');
                var closebutton = document.getElementById('closebutton')
                var continuebutton = document.getElementById('continuebutton')
                modal.style.display = "block";
                closebutton.onclick = function() {
                modal.style.display = "none";//closes pop up
                }
                continuebutton.onclick = function()
                {
                    postResourceForm();
                    location.href = "@Url.Action("Result", "Home")";
                }
            }
            else
            {
                postResourceForm();
                location.href = "@Url.Action("Result", "Home")";
            }
        }

        function postResourceForm() {
            var data = $('#resourceForm').serialize();
            $.ajax({
                type: "POST",
                url: "@Url.Action("ResourceUpdate")",
                data: data,
                traditional:true,
                success: function (result) {
                location.reload();
                }
            })
            location.href = '@Url.Action("Result", "Home")'
        }


    $(document).ready(function () {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });

    $(document).on('click', function (e) {
        $('[data-toggle="popover"],[data-original-title]').each(function () {
            if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0 ) {
                (($(this).popover('hide').data('bs.popover') || {}).inState || {}).click = false
            }
        });
    });

</script>
