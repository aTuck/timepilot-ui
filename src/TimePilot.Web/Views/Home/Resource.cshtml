@model TimePilot.Web.ViewModels.ResourceCapacityViewModel
@using TimePilot.Web.Models;
@using System.Linq;

@{
    ViewBag.Title = "Resources | Time Pilot";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section resource{<link href="~/Content/resource-new.css" rel="stylesheet" />}

<div class="modal fade" id="MyModal" data-keyboard="false" data-backdrop="static">
    <!-- Warning Pop UP HTML-->
    <div class="modalstuff">
        <header>
            <h2 class="resourcepopup">
                One or more members has negative total avalibality
            </h2>     
        </header>
        <button class="btn closebutton" id="closebutton" data-dismiss="modal"> Edit Members </button>
        <button class="btn proceedbutton" id="continuebutton" data-dismiss="modal"> Continue </button>
    </div>
</div>

@using (Html.BeginForm("Resource", "Home", FormMethod.Post, new { @id = "resource-form" }))
{
    int memberTotal = 0;
    Model.pageState = new List<int>();
    <div class="container">
        @for (int i = 0; i < Model.sprints.Count(); i++)
        {
            int membersInThisSprint = 0;
            Model.pageState.Add(0);
            Model.sprints[i].PageID = i;
            <div id="@i" class="panel panel-default">
                @Html.HiddenFor(m => m.sprints[i].SprintID, new { @class = "sprint-id" })
                <div class="panel-heading sprint-heading">
                    <div class="sprint-control-panel editable">
                        <div class="input-group">
                            <h3 class="sprint-name" id="sprint-name-@i">@(Model.sprints[i].Name)</h3>
                            @Html.HiddenFor(m => m.sprints[i].Name, new { @id="sprint-name-"+i+"-hidden"})
                            <input class="page-id" type="hidden" id="sprints_@(i)__PageID" name="sprints[@(i)].PageID" value="@i" />
                        </div>
                        <div class="btn-control-panel">
                            <button type="button" class="btn btn-primary add-member-btn" id="@i"><span class="glyphicon glyphicon-plus-sign"></span><span class="add-member-text">&nbsp; Add Member</span></button>
                            <span class="sprint-remove glyphicon glyphicon-remove" />
                        </div>
                    </div>
                </div>
                <div class="panel-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th><span class="glyphicon glyphicon-user"/></th>
                                <th>Name</th>
                                <th>Sprint Days</th>
                                <th>% Work</th>
                                <th>Total Hrs</th>
                                <th>SU Length</th>
                                <th>Total SU</th>
                                <th>Misc &nbsp;<a href="#" data-toggle="popover" data-placement="bottom" title="Miscellaneous" data-content="Meetings (Backlog Review, Dev Meeting), Demos/Retros, Sprint Planning"><span class="glyphicon glyphicon-question-sign"></span></a></th>
                                <th>Time Off &nbsp;<a href="#" data-toggle="popover" data-placement="bottom" title="Time Off" data-content="Any sick days, holidays, vacation time, or other time off here "><span class="glyphicon glyphicon-question-sign"></span></a></th>
                                <th>Non Dev</th>
                                <th>Total Capacity</th>
                                <th><span class="glyphicon glyphicon-trash" /></th>
                            </tr>
                        </thead>
                        <tbody>
                        @for (int j = 0; j < Model.members.Count; j++)
                        {
                            if (Model.members[j].SprintID == Model.sprints[i].SprintID)
                            {
                                Model.pageState[i]++;
                                <tr id="@i-@membersInThisSprint" class="member-row">
                                    <input type="hidden" class="sprint-id" id="members_@(memberTotal)__SprintID" name="members[@(memberTotal)].SprintID" value="@Model.members[j].SprintID" />
                                    <input type="hidden" class="page-id" id="members_@(memberTotal)__PageID" name="members[@(memberTotal)].PageID" value="@i" />
                                    @Html.HiddenFor(m => m.members[j].MemberID)
                                    <td>
                                        <select class="role-select">
                                            <option value="leadDev" @*selected=logic for if this is the member's role from db'*@>Lead Dev</option>
                                            <option value="seniorDev" @*selected=logic for if this is the member's role from db'*@>Senior Dev</option>
                                            <option value="intermediateDev" @*selected=logic for if this is the member's role from db'*@>Dev</option>
                                            <option value="juniorDev" @*selected=logic for if this is the member's role from db'*@>Junior Dev</option>
                                            <option value="leadQA" @*selected=logic for if this is the member's role from db'*@>Lead QA</option>
                                            <option value="seniorQA" @*selected=logic for if this is the member's role from db'*@>Senior QA</option>
                                            <option value="intermediateQA" @*selected=logic for if this is the member's role from db'*@>QA</option>
                                            <option value="juniorQA" @*selected=logic for if this is the member's role from db'*@>Junior QA</option>
                                        </select>
                                    </td>
                                    <td>@Html.TextBoxFor(m => m.members[j].Name, new { @class = "form-control form-control-name", placeholder = "Name" })</td>
                                    <td>@Html.TextBoxFor(m => m.members[j].SprintDays, new { @class = "form-control raw-data" })</td>
                                    <td>@Html.TextBoxFor(m => m.members[j].PercentWork, new { @class = "form-control raw-data" })</td>
                                    <td><input type="text" class="form-control total" Name="totalHours" readonly /></td>
                                    <td>@Html.TextBoxFor(m => m.members[j].StandupDuration, new { @class = "form-control raw-data" })</td>
                                    <td><input type="text" class="form-control total" Name="standUps" readonly /></td>
                                    <td>@Html.TextBoxFor(m => m.members[j].Misc, new { @class = "form-control raw-data" })</td>
                                    <td>@Html.TextBoxFor(m => m.members[j].TimeOff, new { @class = "form-control raw-data" })</td>
                                    <td><input type="text" class="form-control total" Name="nonDevHours" readonly /></td>
                                    <td><input type="text" class="form-control total" Name="totalAvailable" readonly /></td>
                                    <td><input type="checkbox" name="chkDelete" value="@Model.members[j].MemberID" /></td>
                                </tr>
                                membersInThisSprint++;
                                memberTotal++;
                            }
                        }
                        <tr id="@i-@membersInThisSprint"></tr> @*placeholder member*@
                        </tbody>
                    </table>
                </div>
            </div>
            if (i == (Model.sprints.Count() - 1))
            {
                <div id="@(i+1)" class="panel panel-default" style="display:none;"></div> @*placeholder sprint*@
            }
        }
        <div class="crud-control-panel">
            <button class="btn btn-lg btn-primary ctrl-btn add-sprint" data-toggle="tooltip" title="Add a sprint" data-placement="right"> + </button>
            <div class="form-group">
                <label>Total Dev Capacity</label>
                <div class="final-value">0</div>
            </div>
            <div class="form-group">
                <label>Average Per Sprint</label>
                <div class="final-value">0</div>
            </div>
            <div class="form-group">
                <label>Average Per Week</label>
                <div class="final-value">0</div>
            </div>
                <button class="delete-selected btn btn-danger ctrl-btn"><span class="glyphicon glyphicon-trash"></span> &nbsp; Delete Selected</button>
            </div>

        @Html.HiddenFor(m => m.totalDevCapacity, new { @class = "total-dev-capacity-hidden" })
        <div class="nav-control-panel">
            <button class="btn ctrl-btn btn-primary nav-btn btn-prev"><span class="glyphicon glyphicon-menu-left"></span>&nbsp; Stories </button>
            <button class="btn ctrl-btn btn-primary nav-btn btn-next">Results &nbsp; <span class="glyphicon glyphicon-menu-right"></span></button>
        </div>
    </div>
}
<script type="text/javascript">
    // Always save changes
    $(window).bind('beforeunload', function () {
        postResourceForm();
    });
    //$(document).on('blur', '.form-control', function(){
    //    postResourceForm();
    //})
    //$(document).on('change', '.role-select', function(){
    //    postResourceForm();
    //})
    //$(document).on('blue', '.sprint-name-edit', function(){
    //    postResourceForm();
    //})

    function postResourceForm() {
        var data = $('#resource-form').serialize();
        $.ajax({
            type: "POST",
            url: "@Url.Action("ResourceUpdate")",
            data: data,
            traditional:true,
            success: function (result) {
                //do nothing right now, used to be reload
            }
        })
    }

    function ResourceValidation() {
        var isInvalidInput = false;

        $("input[name='totalAvailable']").each(function () {
            if (parseInt($(this).attr('value')) <= 0) {
                $(this).css("background-color", "#e56060");
                isInvalidInput = true; // Set flag
            }
        })

        // Flag was set
        if(isInvalidInput) {
            var modal = document.getElementById('MyModal');
            var closebutton = document.getElementById('closebutton')
            var continuebutton = document.getElementById('continuebutton')
            modal.style.display = "block";
            closebutton.onclick = function() {
                modal.style.display = "none"; // Closes pop up
            }
            continuebutton.onclick = function()
            {
                postResourceForm();
                location.href = "@Url.Action("Result", "Home")";
            }
        }
        else {
            postResourceForm();
            location.href = "@Url.Action("Result", "Home")";
        }
    }

    function calculateValues(data, totals, finals) {
        // Member variables
        var hrsPerDay = 8;
        var temp = 0;

        // Data
        var sprintDays = data[0].value;
        var pcntWork = data[1].value;
        var standupDuration = data[2].value;
        var miscHours = data[3].value;
        var timeOff = data[4].value;

        // Totals
        var ttlHours = totals[0];
        var standUps = totals[1];
        var nonDevHours = totals[2];
        var ttlAvailable = totals[3];

        // Finals
        var ttlDevCapac = finals[0];
        var avgPerSprint = finals[1];
        var avgPerWeek = finals[2];

        // Data Calculations
        ttlHours.value = sprintDays * (pcntWork / 100) * hrsPerDay;
        standUps.value = sprintDays * standupDuration;
        nonDevHours.value = parseFloat(miscHours) + parseFloat(standUps.value);
        ttlAvailable.value = ttlHours.value - nonDevHours.value - timeOff;

        // Overall Calculations
        var ttls = document.getElementsByName("totalAvailable");
        var sprints = document.getElementsByClassName("sprint-name").length;
        for (i = 0; i < ttls.length; i++) {temp += parseFloat(ttls[i].value);}
        ttlDevCapac.textContent = round(parseFloat(temp), 1)+' hrs';
        $('.total-dev-capacity-hidden').val(round(parseFloat(temp), 1));
        avgPerSprint.textContent = round(parseFloat(temp / sprints), 1)+' hrs';
        avgPerWeek.textContent = round(parseFloat((temp / sprints) / 2), 1)+' hrs';
    }

    // Prevent rounding errors
    function round(value, decimals) {
        return Number(Math.round(value+'e'+decimals)+'e-'+decimals);
    }

    // Popovers
    $(document).ready(function () {
        $('[data-toggle="popover"]').popover({
            html: true
        });
    });
    $(document).on('click', function (e) {
        $('[data-toggle="popover"],[data-original-title]').each(function () {
            if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0 ) {
                (($(this).popover('hide').data('bs.popover') || {}).inState || {}).click = false
            }
        });
    });

    // Tooltip
    $(document).ready(function(){
        $('[data-toggle="tooltip"]').tooltip();
    });

    // Set default values + calculations on select box change
    $(document).on("change", "select", function () {
        var elems = this.parentNode.parentNode.getElementsByClassName("raw-data");
        switch (this.value) {
            case 'leadDev':
                elems[0].value = 10;   // Sprint Days
                elems[1].value = 50;   // % Work
                elems[2].value = 0.25; // Standup Duration
                elems[3].value = 6;    // Misc.
                elems[4].value = 0;    // Time Off
                break;
            case 'seniorDev':
                elems[0].value = 10;   // Sprint Days
                elems[1].value = 70;   // % Work
                elems[2].value = 0.25; // Standup Duration
                elems[3].value = 5;    // Misc.
                elems[4].value = 0;    // Time Off
                break;
            case 'intermediateDev':
                elems[0].value = 10;   // Sprint Days
                elems[1].value = 80;   // % Work
                elems[2].value = 0.25; // Standup Duration
                elems[3].value = 4;    // Misc.
                elems[4].value = 0;    // Time Off
                break;
            case 'juniorDev':
                elems[0].value = 10;   // Sprint Days
                elems[1].value = 90;   // % Work
                elems[2].value = 0.25; // Standup Duration
                elems[3].value = 4;    // Misc.
                elems[4].value = 0;    // Time Off
                break;
            case 'leadQA':
                elems[0].value = 10;   // Sprint Days
                elems[1].value = 50;   // % Work
                elems[2].value = 0.25; // Standup Duration
                elems[3].value = 6;    // Misc.
                elems[4].value = 0;    // Time Off
                break;
            case 'seniorQA':
                elems[0].value = 10;   // Sprint Days
                elems[1].value = 70;   // % Work
                elems[2].value = 0.25; // Standup Duration
                elems[3].value = 5;    // Misc.
                elems[4].value = 0;    // Time Off
                break;
            case 'intermediateQA':
                elems[0].value = 10;   // Sprint Days
                elems[1].value = 80;   // % Work
                elems[2].value = 0.25; // Standup Duration
                elems[3].value = 4;    // Misc.
                elems[4].value = 0;    // Time Off
                break;
            case 'juniorQA':
                elems[0].value = 10;   // Sprint Days
                elems[1].value = 90;   // % Work
                elems[2].value = 0.25; // Standup Duration
                elems[3].value = 4;    // Misc.
                elems[4].value = 0;    // Time Off
                break;
        }
        var data = this.parentNode.parentNode.getElementsByClassName("raw-data");
        var totals = this.parentNode.parentNode.getElementsByClassName("total");
        var finals = document.getElementsByClassName("final-value")
        calculateValues(data, totals, finals);
    })


    // Do calculations during user input
    $('input').on('keyup', function () {
        if ($(this).hasClass('raw-data')){
            var data = this.parentNode.parentNode.getElementsByClassName("raw-data");
            var totals = this.parentNode.parentNode.getElementsByClassName("total");
            var finals = document.getElementsByClassName("final-value")
            calculateValues(data, totals, finals);
        }
    })

    // Do calculations on page load
    $(document).ready(function(){
        $(".member-row").each(function(){
            if($(this).css('display') != 'none'){
                var data = this.getElementsByClassName("raw-data");
                var totals = this.getElementsByClassName("total");
                var finals = document.getElementsByClassName("final-value")
                calculateValues(data, totals, finals);
            }
        })
    })

    // DOM modication for adding Sprints/Members
    $(document).ready(function () {
        var pageState = @Html.Raw(Json.Encode(Model.pageState));
        var memberTotal = 0;

        for (var i=0; i<pageState.length; i++){
            memberTotal += pageState[i];
        }

        $(document).on('click', '.add-member-btn', function(){
            var sprintNum = this.id;
            var memberNum = pageState[sprintNum];
            addMember(sprintNum, memberNum);
        })

        $('.add-sprint').click(function(e){
            e.preventDefault();
            this.blur();
            pageState.push(0);
            var sprintNum = pageState.length - 1;

            // Populate placeholder sprint with correct HTML
            $('#'+sprintNum).show();
            $('#'+sprintNum).html(''+
            '<div class="panel-heading sprint-heading">'+
                '<input class="sprint-id" id="sprints_'+sprintNum+'__SprintID" name="sprints['+sprintNum+'].SprintID" type="hidden" value="-1">'+
                '<div class="sprint-control-panel editable">'+
                    '<div class="input-group">'+
                        '<h3 id="sprint-name-'+sprintNum+'" class="sprint-name">Enter Sprint Name...</h3>'+
                        '<input id="sprint-name-'+sprintNum+'-hidden" name="sprints['+sprintNum+'].Name" type="hidden" value="Enter Sprint Name..."/>'+
                        '<input class="page-id" id="sprints_'+sprintNum+'__PageID" name="sprints['+sprintNum+'].PageID" type="hidden" value="'+sprintNum+'" />'+
                    '</div>'+
                    '<div class="btn-control-panel">'+
                        '<button type="button" class="btn btn-primary add-member-btn" id="'+sprintNum+'"><span class="glyphicon glyphicon-plus-sign"></span><span class="add-member-text">&nbsp; Add Member</span></button>'+
                        '<span class="sprint-remove glyphicon glyphicon-remove" />'+
                    '</div>'+
                '</div>'+
            '</div>'+
            '<div class="panel-body">'+
                '<table class="table">'+
                    '<thead>'+
                        '<tr>'+
                            '<th><span class="glyphicon glyphicon-user"/></th>'+
                            '<th>Name</th>'+
                            '<th>Sprint Days</th>'+
                            '<th>% Work</th>'+
                            '<th>Total Hrs</th>'+
                            '<th>SU Length</th>'+
                            '<th>Total SU</th>'+
                            '<th>Misc &nbsp;<a href="#" data-toggle="popover" data-placement="bottom" title="Miscellaneous" data-content="Meetings (Backlog Review, Dev Meeting), Demos/Retros, Sprint Planning"><span class="glyphicon glyphicon-question-sign"></span></a></th>'+
                            '<th>Time Off &nbsp;<a href="#" data-toggle="popover" data-placement="bottom" title="Time Off" data-content="Any sick days, holidays, vacation time, or other time off here "><span class="glyphicon glyphicon-question-sign"></span></a></th>'+
                            '<th>Non Dev</th>'+
                            '<th>Total Capacity</th>'+
                            '<th><span class="glyphicon glyphicon-trash" /></th>'+
                        '</tr>'+
                    '</thead>'+
                    '<tbody id="tbody-'+sprintNum+'">'+
                    '</tbody>'+
                '</table>'+
            '</div>'+'')

            // Append member placeholder and add default member
            $('#tbody-'+sprintNum).append('<tr id="'+sprintNum+'-'+pageState[sprintNum]+'" class="member-row"></tr>')
            addMember(sprintNum, pageState[sprintNum]);

            // Append Sprint placeholder
            $('<div id="'+(sprintNum+1)+'" class="panel panel-default" style="display:none;"></div>').insertAfter('#'+sprintNum);

        });

        function addMember(sprintNum, memberNum){
            $('#'+sprintNum+'-'+memberNum).html(''+
                    '<td>'+
                        '<select class="role-select">'+
                            '<option value="leadDev" >Lead Dev</option>'+
                            '<option value="seniorDev" >Senior Dev</option>'+
                            '<option value="intermediateDev" >Dev</option>'+
                            '<option value="juniorDev" >Junior Dev</option>'+
                            '<option value="leadQA" >Lead QA</option>'+
                            '<option value="seniorQA" >Senior QA</option>'+
                            '<option value="intermediateQA">QA</option>'+
                            '<option value="juniorQA">Junior QA</option>'+
                        '</select>'+
                    '</td>'+
                    '<td><input type="text" class="form-control" id="members_'+memberTotal+'__Name" name="members['+memberTotal+'].Name" placeholder="Name"/></td>'+
                    '<td><input type="text" class="form-control raw-data" id="members_'+memberTotal+'__SprintDays" name="members['+memberTotal+'].SprintDays"/></td>'+
                    '<td><input type="text" class="form-control raw-data" id="members_'+memberTotal+'__PercentWork" name="members['+memberTotal+'].PercentWork"/></td>'+
                    '<td><input type="text" class="form-control total" Name="totalHours" readonly /></td>'+
                    '<td><input type="text" class="form-control raw-data" id="members_'+memberTotal+'__StandupDuration" name="members['+memberTotal+'].StandupDuration"/></td>'+
                    '<td><input type="text" class="form-control total" Name="standUps" readonly /></td>'+
                    '<td><input type="text" class="form-control raw-data" id="members_'+memberTotal+'__Misc" name="members['+memberTotal+'].Misc" /></td>'+
                    '<td><input type="text" class="form-control raw-data" id="members_'+memberTotal+'__TimeOff" name="members['+memberTotal+'].TimeOff"/> </td>'+
                    '<td><input type="text" class="form-control total" Name="nonDevHours" readonly /></td>'+
                    '<td><input type="text" class="form-control total" Name="totalAvailable" readonly /></td>'+
                    '<td><input type="checkbox" name="chkDelete" value="-1"/></td>'+
                    '<input type="hidden" id="members_'+memberTotal+'__PageID" name="members['+memberTotal+'].PageID" class="page-id" value="'+sprintNum+'"'+
                '</tr>'+'');

            $('<tr id="'+sprintNum+'-'+(memberNum+1)+'" class="member-row">').insertAfter('#'+sprintNum+'-'+memberNum);
            pageState[sprintNum]++;
            memberTotal++;
        }
    });
    function deleteSprint(sprint){
        var data = $(sprint.getElementsByClassName("sprint-id")[0]).val();
        $.ajax({
            type: "POST",
            url: "@Url.Action("ResourceSprintDelete")",
            data: { id: data },
            traditional: true,
            success: function (result) {
                $(sprint).detach().hide();
                $(sprint.getElementsByClassName("page-id")[0]).val(-1);
            }
        })
    }
    function deleteMembers(){
        var data = [];
        $("input[name='chkDelete']:checked").each(function () {
            data.push($(this).val());
        });
        if (data.length == 0) {
            return;
        }
        else if (data.length >0) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("ResourceMemberDelete")",
                data: { id: data },
                traditional: true,
                success: function (result) {
                    //Modify DOM
                    $("input[name='chkDelete']:checked").each(function () {
                        $(this.parentNode.parentNode.getElementsByClassName("page-id")).val(-1);
                        $(this.parentNode.parentNode.getElementsByClassName("raw-data")).each(function(){
                            $(this).removeClass('raw-data');
                        })
                        $(this.parentNode.parentNode).detach().hide();
                    })
                }
            })
        }
    }
    $(document).on('click', function (e) {
        $('[data-toggle="popover"],[data-original-title]').each(function () {
            if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0 ) {
                (($(this).popover('hide').data('bs.popover') || {}).inState || {}).click = false
            }
        });
    });

    /* smooth auto horizontal scroll for responsiveness */
    $('.form-control').on('focus', function() {
        var panel = $(this).closest('.panel-body')[0];
        $(panel).stop().animate({scrollLeft:($(this).offset().left - 400)}, 300);
    });

    /* title editing */
    $(document).on('click', '.sprint-name', function(e) {
        e.preventDefault();
        setToEdit(this);
    });
    $(document).on('blur', '.sprint-name-edit', function(e) {
        e.preventDefault();
        setToText(this);
    });
    $(document).on('keydown', '.sprint-name-edit', function(e){
        if(e.keyCode == 13 && $('.sprint-name-edit').is(':focus')){ //enter button
            setToText(this);
        }
    })
    function setToEdit(sprintName){
        $(sprintName.parentNode.parentNode).removeClass('editable')
        var text = $(sprintName).text();
        var id = $(sprintName).attr('id');
        $(sprintName).replaceWith("<input type='text' class='form-control input-lg sprint-name-edit' value='"+text+"' maxlength='45' id='"+id+"'/> ");
        $('.sprint-name-edit').focus();
        $('.sprint-name-edit').select();
    }
    function setToText(sprintNameEdit){
        $(sprintNameEdit.parentNode.parentNode).addClass('editable')
        var text = $.trim($(sprintNameEdit).val());
        var id = $(sprintNameEdit).attr('id');
        if (text != ""){
            $(sprintNameEdit).replaceWith("<h3 class='sprint-name' id='"+id+"'>"+text+"</h3>");
            $('#'+id+'-hidden').val(text);
        }
        else{
            $(sprintNameEdit).replaceWith("<h3 class='sprint-name' id='"+id+"'>Enter sprint name...</h3>");
        }
    }

    /* delete confirmations */
    $(document).on('click', '.sprint-remove', function(e){
        if(confirm("Delete this sprint?")){
            deleteSprint(this.parentNode.parentNode.parentNode.parentNode);
            return false;
        }
    });
    $('.delete-selected').on('click', function(){
        if(confirm("Delete selected members?")){
            deleteMembers();
            return false;
        }
    });

    /* detach and re-append dropdown menu to prevent panel clipping*/
    (function(){
        var dropdownMenu
        $(document).on('show.bs.dropdown', function(e) {
            dropdownMenu = $(e.target).find('.dropdown-menu');
            $('body').append(dropdownMenu.detach());
            dropdownMenu.css('display', 'block');
            dropdownMenu.position({
                'my': 'left top',
                'at': 'left bottom',
                'of': $(e.relatedTarget)
            })
        });
        $(document).on('hide.bs.dropdown', function(e) {
            $(e.target).append(dropdownMenu.detach());
            dropdownMenu.hide();
        });
    })();
    // Navigate to resource page
    $('.btn-next').on('click', function(e) {
        e.preventDefault();
        $('#loading').show();
        window.location.href = "@Url.Action("Result", "Home")"
    })

    // Navigate to previous page
    $('.btn-prev').on('click', function(e) {
        e.preventDefault();
        window.location.href = "@Url.Action("Story", "Home")"
    })

</script>
