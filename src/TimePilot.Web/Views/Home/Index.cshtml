
@using TimePilot.Web.ViewModels
@using TimePilot.Controllers
@model ProjectViewModel

@{
    ViewBag.Title = "Home Page - Time Pilot";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <div class="flex-container-header">
        <h1>Time Pilot</h1>
        <p><a class="activebread">Project Selection ></a><a class="deactivebread"> Story Points > Resource Capacity > Conversion Rate & Results</a></p>
    </div>
    <div class="pre-project-container">
        <h2 class="project-header">PROJECTS</h2>
        <div class="project-controls">
            <p class="controls-label">Sort Project By:</p>

            @Html.DropDownList("SortBy", new SelectListItem[]
            {
                new SelectListItem() { Text = "Name A-Z", Value = Url.Action("SortedIndex", "Home", new { sortOrder = "order_desc" })},
                new SelectListItem() { Text = "Name Z-A", Value = Url.Action("SortedIndex", "Home", new { sortOrder = "order_asc" })},
            },  new { @onChange = "this.form.submit()" })

            <p class="controls-label">Search:</p>
            <input id="search-box" onkeyup="filter()"/>
        </div>
    </div>
    <div class="project-container">
        @using (Html.BeginForm("Index", "Home", FormMethod.Post, new { @id = "projectForm" }))
        {
            @Html.DropDownListFor(m => m.SelectedProject,
                                new SelectList(Model.ProjectList, "ProjectKey", "Summary"),
                                new { size = "25", @class = "projectList", @id = "projectList" })
            <input type="submit" value="Stories Page" onclick="this.form.submit()" class="button" />
        }
    </div>
</div>

<!-- Filters dropdown list based on search box-->
<script>
function filter() {
    // Declare variables
    var input, filter, select, option, i;
    input = document.getElementById('search-box');
    filter = input.value.toUpperCase();
    select = document.getElementById('projectList');
    option = select.getElementsByTagName('option');

    // Loop through all list items, and hide those who don't match the search query
    for (i = 0; i < option.length; i++) {
        if (option[i].innerHTML.toUpperCase().indexOf(filter) > -1) {
            option[i].style.display = "";
        } else {
            option[i].style.display = "none";
        }
    }
}
</script>

<!-- Attempt at autocomplete menu
<script>
    $("document").ready(function () {
        var projects = @Html.Raw(Json.Encode(Model.ProjectList));
        var availableTags = [];
        $projects.each(projects, function(i, proj){
            availableTags.push(proj.Summary);
        })
        $("#search-box").change((function() {
            $("#search-box").autocomplete({
                source: availableTags
            });
        }))
    });
</script>
-->

