@using TimePilot.Web.ViewModels
@using TimePilot.Controllers
@model ProjectViewModel

@{
    ViewBag.Title = "Home Page - Time Pilot";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="flex-container-header">
    <h1 href="Index">Time Pilot</h1>
    <p>
        <a class="activebread">Project Selection</a> >
        <a class="deactivebread">Story Points</a> >
        <a class="deactivebread">Resource Capacity</a> >
        <a class="deactivebread">Conversion Rate & Results</a>
    </p>
</div>
<div class="pre-project-container">
    <h2 class="project-header">PROJECTS</h2>
    <div class="aside-right">
        <p class="controls-label">Sort Project By:</p>
        <select id="sort-order">
            <option value="desc">Name A-Z</option>
            <option value="asc">Name Z-A</option>
        </select>
        <p class="controls-label">Search:</p>
        <input id="search-box" />
    </div>
</div>

<div class="project-container">
    <p id="noproject" > </p>
    @using (Html.BeginForm("Index", "Home", FormMethod.Post, new { @id = "projectForm" }))
    {
        @Html.DropDownListFor(m => m.SelectedProject,
                                new SelectList(Model.ProjectList, "ProjectKey", "Summary"),

                                new { size = "25", @class = "projectList", @id = "projectList" })
        <input type="submit" value="Stories Page" class="button" id="submit" />
    }
    
  

</div>


<script>
//Filters dropwdown list based on search box input
document.getElementById("search-box").onkeyup = function() {
    // Declare variables
    var input, filter, select, option, i, test = 0, projectcounter=0;
    input = document.getElementById('search-box');
    filter = input.value.toUpperCase();
    select = document.getElementById('projectList');
    option = select.getElementsByTagName('option');

    // Loop through all list items, and hide those who don't match the search query
    for (i = 0; i < option.length; i++) {
        if (option[i].innerHTML.toUpperCase().indexOf(filter) > -1) {
            option[i].style.display = "";
            if (test % 2 == 0) {
                option[i].style.background = "#e2fdff";
            }
            else {
                option[i].style.background = "#c0d9db";
            }
            test++;
            
        } else {
            option[i].style.display = "none";
            projectcounter++;
        }

        if (projectcounter == option.length) {
            noproject.innerHTML = "There are no projects found, please search again" ;
        }
        else if (projectcounter < option.length) {
            noproject.innerHTML = " ";
        }   
    }  
}

//Sorts dropdown list based on sort order selected
document.getElementById("sort-order").onchange = function () {
    // Declare variables
    var tmpAry = new Array();
    var hiddenRef = new Array();
    sortOrder = this.value;
    selElem = document.getElementById("projectList");

    // Add hidden options to reference array, create temp array of option data
    for (var i = 0; i < selElem.options.length; i++) {
    if (selElem.options[i].style.display == "none") {
        hiddenRef.push(selElem.options[i].value);
    }
        tmpAry[i] = new Array();
        tmpAry[i][0] = selElem.options[i].value;
        tmpAry[i][1] = selElem.options[i].text;
    }

    // Rearrange options in desired order
    sortOrder == "desc" ? tmpAry.sort() : tmpAry.reverse()

    // Null out current obtion objects
    while (selElem.options.length > 0) {
        selElem.options[0] = null;
    }

    // Recreate option objects and add them back in new desired order
    // This includes hidden options, maintaining hidden property
    for (var i = 0; i < tmpAry.length; i++) {
    var op = new Option(tmpAry[i][1], tmpAry[i][0]);
    if (hiddenRef.includes(op.value)) {
        op.style.display = "none";
    }
        selElem.options[i] = op;
    }
    return;
}
</script>


